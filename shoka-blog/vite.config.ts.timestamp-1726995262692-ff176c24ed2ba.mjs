// vite.config.ts
import dayjs from "file:///C:/Users/bb162/Desktop/blog-master/blog-master/blog-vue/shoka-blog/node_modules/dayjs/dayjs.min.js";
import { fileURLToPath } from "node:url";
import { defineConfig, loadEnv } from "file:///C:/Users/bb162/Desktop/blog-master/blog-master/blog-vue/shoka-blog/node_modules/vite/dist/node/index.js";

// src/utils/service.ts
function createServiceConfig(env) {
  const { VITE_SERVICE_BASE_URL } = env;
  const config = {
    baseURL: VITE_SERVICE_BASE_URL,
    proxyPattern: createProxyPattern()
  };
  return config;
}
function createProxyPattern() {
  return "/api";
}

// build/config/proxy.ts
function createViteProxy(env) {
  const isOpenProxy = env.VITE_HTTP_PROXY === "Y";
  if (!isOpenProxy) {
    return void 0;
  }
  const { baseURL, proxyPattern } = createServiceConfig(env);
  const proxy = createProxyItem({ baseURL, proxyPattern });
  return proxy;
}
function createProxyItem(item) {
  const proxy = {};
  proxy[item.proxyPattern] = {
    target: item.baseURL,
    changeOrigin: true,
    rewrite: (path2) => path2.replace(new RegExp(`^${item.proxyPattern}`), "")
  };
  return proxy;
}

// build/plugins/index.ts
import unocss from "file:///C:/Users/bb162/Desktop/blog-master/blog-master/blog-vue/shoka-blog/node_modules/@unocss/vite/dist/index.mjs";
import vue from "file:///C:/Users/bb162/Desktop/blog-master/blog-master/blog-vue/shoka-blog/node_modules/@vitejs/plugin-vue/dist/index.mjs";
import vueJsx from "file:///C:/Users/bb162/Desktop/blog-master/blog-master/blog-vue/shoka-blog/node_modules/@vitejs/plugin-vue-jsx/dist/index.mjs";
import progress from "file:///C:/Users/bb162/Desktop/blog-master/blog-master/blog-vue/shoka-blog/node_modules/vite-plugin-progress/dist/index.mjs";
import VueDevtools from "file:///C:/Users/bb162/Desktop/blog-master/blog-master/blog-vue/shoka-blog/node_modules/vite-plugin-vue-devtools/dist/vite.mjs";

// build/plugins/compress.ts
import ViteCompression from "file:///C:/Users/bb162/Desktop/blog-master/blog-master/blog-vue/shoka-blog/node_modules/vite-plugin-compression/dist/index.mjs";
var compress_default = (viteEnv) => {
  const { VITE_COMPRESS_TYPE = "gzip" } = viteEnv;
  return ViteCompression({ algorithm: VITE_COMPRESS_TYPE });
};

// build/plugins/unplugin.ts
import path from "node:path";
import AutoImport from "file:///C:/Users/bb162/Desktop/blog-master/blog-master/blog-vue/shoka-blog/node_modules/unplugin-auto-import/dist/vite.js";
import { FileSystemIconLoader } from "file:///C:/Users/bb162/Desktop/blog-master/blog-master/blog-vue/shoka-blog/node_modules/unplugin-icons/dist/loaders.js";
import IconsResolver from "file:///C:/Users/bb162/Desktop/blog-master/blog-master/blog-vue/shoka-blog/node_modules/unplugin-icons/dist/resolver.js";
import Icons from "file:///C:/Users/bb162/Desktop/blog-master/blog-master/blog-vue/shoka-blog/node_modules/unplugin-icons/dist/vite.js";
import { NaiveUiResolver } from "file:///C:/Users/bb162/Desktop/blog-master/blog-master/blog-vue/shoka-blog/node_modules/unplugin-vue-components/dist/resolvers.mjs";
import Components from "file:///C:/Users/bb162/Desktop/blog-master/blog-master/blog-vue/shoka-blog/node_modules/unplugin-vue-components/dist/vite.mjs";
import { prismjsPlugin } from "file:///C:/Users/bb162/Desktop/blog-master/blog-master/blog-vue/shoka-blog/node_modules/vite-plugin-prismjs/dist/index.js";
import { createSvgIconsPlugin } from "file:///C:/Users/bb162/Desktop/blog-master/blog-master/blog-vue/shoka-blog/node_modules/vite-plugin-svg-icons/dist/index.mjs";
function unplugin(viteEnv) {
  const { VITE_ICON_PREFIX, VITE_ICON_LOCAL_PREFIX } = viteEnv;
  const localIconPath = path.join(process.cwd(), "src/assets/icons");
  const collectionName = VITE_ICON_LOCAL_PREFIX.replace(
    `${VITE_ICON_PREFIX}-`,
    ""
  );
  return [
    Icons({
      compiler: "vue3",
      customCollections: {
        [collectionName]: FileSystemIconLoader(
          localIconPath,
          (svg) => svg.replace(/^<svg\s/, '<svg width="1em" height="1em" ')
        )
      },
      scale: 1,
      defaultClass: "inline-block"
    }),
    AutoImport({
      imports: ["vue", "vue-router", "pinia"],
      dts: "src/types/auto-imports.d.ts"
    }),
    Components({
      dts: "src/types/components.d.ts",
      resolvers: [
        NaiveUiResolver(),
        IconsResolver({
          customCollections: [collectionName],
          componentPrefix: VITE_ICON_PREFIX
        })
      ]
    }),
    createSvgIconsPlugin({
      // 指定需要缓存的图标文件夹
      iconDirs: [localIconPath],
      // 指定symbolId格式
      symbolId: "icon-[dir]-[name]"
    }),
    prismjsPlugin({
      languages: [
        "java",
        "python",
        "html",
        "css",
        "sass",
        "less",
        "go",
        "cpp",
        "c",
        "js",
        "ts",
        "sql",
        "bash",
        "git",
        "nginx",
        "php"
      ],
      theme: "tomorrow",
      css: true
    })
  ];
}

// build/plugins/visualizer.ts
import { visualizer } from "file:///C:/Users/bb162/Desktop/blog-master/blog-master/blog-vue/shoka-blog/node_modules/rollup-plugin-visualizer/dist/plugin/index.js";
var visualizer_default = visualizer({
  gzipSize: true,
  brotliSize: true,
  open: true
});

// build/plugins/index.ts
function setupVitePlugins(viteEnv) {
  const plugins = [
    vue(),
    vueJsx(),
    VueDevtools(),
    ...unplugin(viteEnv),
    unocss(),
    progress()
  ];
  if (viteEnv.VITE_VISUALIZER === "Y") {
    plugins.push(visualizer_default);
  }
  if (viteEnv.VITE_COMPRESS === "Y") {
    plugins.push(compress_default(viteEnv));
  }
  return plugins;
}

// vite.config.ts
var __vite_injected_original_import_meta_url = "file:///C:/Users/bb162/Desktop/blog-master/blog-master/blog-vue/shoka-blog/vite.config.ts";
var vite_config_default = defineConfig((configEnv) => {
  const viteEnv = loadEnv(
    configEnv.mode,
    process.cwd()
  );
  const buildTime = dayjs().format("YYYY-MM-DD HH:mm:ss");
  return {
    base: viteEnv.VITE_BASE_URL,
    resolve: {
      alias: {
        "~": fileURLToPath(new URL("./", __vite_injected_original_import_meta_url)),
        "@": fileURLToPath(new URL("./src", __vite_injected_original_import_meta_url))
      }
    },
    define: {
      __VUE_PROD_HYDRATION_MISMATCH_DETAILS__: false,
      BUILD_TIME: JSON.stringify(buildTime)
    },
    plugins: setupVitePlugins(viteEnv),
    server: {
      host: "0.0.0.0",
      port: 1314,
      open: true,
      proxy: createViteProxy(viteEnv)
    },
    build: {
      reportCompressedSize: false,
      sourcemap: false,
      outDir: viteEnv.VITE_DIST_NAME,
      commonjsOptions: {
        ignoreTryCatch: false
      }
    }
  };
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
